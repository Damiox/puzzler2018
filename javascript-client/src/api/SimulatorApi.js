/**
 * Puzzler 2018
 * Control your bot. Collect. Store. Win.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse400', 'model/Simulator', 'model/TickBase'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse400'), require('../model/Simulator'), require('../model/TickBase'));
  } else {
    // Browser globals (root is window)
    if (!root.Puzzler2018) {
      root.Puzzler2018 = {};
    }
    root.Puzzler2018.SimulatorApi = factory(root.Puzzler2018.ApiClient, root.Puzzler2018.InlineResponse400, root.Puzzler2018.Simulator, root.Puzzler2018.TickBase);
  }
}(this, function(ApiClient, InlineResponse400, Simulator, TickBase) {
  'use strict';

  /**
   * Simulator service.
   * @module api/SimulatorApi
   * @version 1.0.0
   */

  /**
   * Constructs a new SimulatorApi. 
   * @alias module:api/SimulatorApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getSimulatorState operation.
     * @callback module:api/SimulatorApi~getSimulatorStateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the current state of the simulator
     * @param {module:api/SimulatorApi~getSimulatorStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getSimulatorState = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/simulator/state', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postSimulatorTick operation.
     * @callback module:api/SimulatorApi~postSimulatorTickCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Simulator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * specify the bot&#39;s action for this frame
     * @param {module:model/TickBase} body 
     * @param {module:api/SimulatorApi~postSimulatorTickCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Simulator}
     */
    this.postSimulatorTick = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postSimulatorTick");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Simulator;

      return this.apiClient.callApi(
        '/simulator/tick', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the simulatorNewPost operation.
     * @callback module:api/SimulatorApi~simulatorNewPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * record current score and skip to the next round
     * @param {module:api/SimulatorApi~simulatorNewPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.simulatorNewPost = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/simulator/new', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
