/**
 * Puzzler 2018
 * Control your bot. Collect. Store. Win.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Action', 'model/BoardPiece', 'model/Entity', 'model/EntityAction', 'model/EntityPosition', 'model/InlineResponse400', 'model/Score', 'model/Simulator', 'model/SimulatorBoard', 'model/TickBase', 'api/ScoresApi', 'api/SimulatorApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Action'), require('./model/BoardPiece'), require('./model/Entity'), require('./model/EntityAction'), require('./model/EntityPosition'), require('./model/InlineResponse400'), require('./model/Score'), require('./model/Simulator'), require('./model/SimulatorBoard'), require('./model/TickBase'), require('./api/ScoresApi'), require('./api/SimulatorApi'));
  }
}(function(ApiClient, Action, BoardPiece, Entity, EntityAction, EntityPosition, InlineResponse400, Score, Simulator, SimulatorBoard, TickBase, ScoresApi, SimulatorApi) {
  'use strict';

  /**
   * Control_your_bot__Collect__Store__Win_.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var Puzzler2018 = require('index'); // See note below*.
   * var xxxSvc = new Puzzler2018.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new Puzzler2018.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new Puzzler2018.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new Puzzler2018.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Action model constructor.
     * @property {module:model/Action}
     */
    Action: Action,
    /**
     * The BoardPiece model constructor.
     * @property {module:model/BoardPiece}
     */
    BoardPiece: BoardPiece,
    /**
     * The Entity model constructor.
     * @property {module:model/Entity}
     */
    Entity: Entity,
    /**
     * The EntityAction model constructor.
     * @property {module:model/EntityAction}
     */
    EntityAction: EntityAction,
    /**
     * The EntityPosition model constructor.
     * @property {module:model/EntityPosition}
     */
    EntityPosition: EntityPosition,
    /**
     * The InlineResponse400 model constructor.
     * @property {module:model/InlineResponse400}
     */
    InlineResponse400: InlineResponse400,
    /**
     * The Score model constructor.
     * @property {module:model/Score}
     */
    Score: Score,
    /**
     * The Simulator model constructor.
     * @property {module:model/Simulator}
     */
    Simulator: Simulator,
    /**
     * The SimulatorBoard model constructor.
     * @property {module:model/SimulatorBoard}
     */
    SimulatorBoard: SimulatorBoard,
    /**
     * The TickBase model constructor.
     * @property {module:model/TickBase}
     */
    TickBase: TickBase,
    /**
     * The ScoresApi service constructor.
     * @property {module:api/ScoresApi}
     */
    ScoresApi: ScoresApi,
    /**
     * The SimulatorApi service constructor.
     * @property {module:api/SimulatorApi}
     */
    SimulatorApi: SimulatorApi
  };

  return exports;
}));
